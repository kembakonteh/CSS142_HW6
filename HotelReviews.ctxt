#BlueJ class context
comment0.target=HotelReviews
comment0.text=\n\ This\ program\ reads\ a\ text\ file\ that\ contains\ integers\ and\ strings.\ It\ calculates\ the\ average\ of\ each\ column\ and\ \n\ determines\ the\ maximum\ value,\ and\ then\ perfomes\ a\ parallel\ sorthing\ on\ the\ corresponding\ strings.\ The\ program\ then\n\ displays\ the\ result.\n\ \n\ @author\ (Kemba\ Konteh)\n\ @version\ (CSC142\ 07/28/2018)\n
comment1.params=name
comment1.target=HotelReviews(java.lang.String)
comment1.text=\n\ This\ method\ is\ the\ constructor\ for\ the\ class\ HotelReviews.\n\n\ @param\ \ filename\ \ It\ accepts\ a\ string\ for\ the\ data\ to\ be\ read.\n\ \n\ @return\ \ \ \ \n
comment10.params=
comment10.target=java.lang.String\ displayHotelNames()
comment10.text=\n\ This\ is\ the\ method\ that\ displays\ the\ names\ of\ the\ (reviewed)\ hotel\n\n\ @param\n\ \n\ @return\ s\ It\ returns\ the\ text\ to\ be\ displayed.\n
comment11.params=
comment11.target=java.lang.String\ disPlayAvgRank()
comment11.text=\n\ This\ is\ the\ method\ that\ displays\ the\ formatted\ average\ rankings\ as\ required.\n\n\ @param\ \ \n\ \n\ @return\ \ s\ \ it\ returns\ the\ text\ to\ be\ displayed\n
comment12.params=
comment12.target=void\ sortByRanking()
comment12.text=\n\ This\ is\ the\ method\ that\ sorts\ all\ the\ data\ in\ descending\ order.\n\n\ @param\ \ \n\ \n\ @return\ \ \ \ \n
comment13.params=
comment13.target=java.lang.String\ displayHotelAndRank()
comment13.text=\n\ This\ is\ the\ method\ that\ displays\ the\ sorted\ names\ by\ rank\ and\ also\ with\ corresponding\ rank.\n\n\ @param\ \ \n\ \n\ @return\ \ s\ it\ returns\ the\ text\ to\ be\ displayed.\n
comment14.params=
comment14.target=void\ test()
comment14.text=\n\ This\ is\ the\ method\ in\ which\ the\ constructor\ HotelReviews\ is\ instantiated\ and\ passed\ in\ the\ data.txt\ file.\n\ The\ the\ object\ or\ code\ block\ is\ then\ surrounded\ with\ a\ try\ catch\ code\ block\ to\ account\ for\ the\ non\ \n\ existence\ of\ the\ file.\ It\ throws\ an\ exception\ if\ the\ file\ does\ not\ exists.\n\n\ @param\ \n\ \n\ @return\ \ \ \n
comment2.params=
comment2.target=int\ getHotelCount()
comment2.text=\n\ This\ is\ the\ method\ that\ accesses\ the\ number\ of\ hotels.\n\n\ @param\ \ \n\ \n\ @return\ \ \ \ hotels.length\ It\ returns\ the\ length\ or\ the\ number\ of\ hotels.\ \n
comment3.params=rowIndex\ colIndex
comment3.target=int\ getRankHotel(int,\ int)
comment3.text=\n\ This\ method\ accesses\ the\ ranks\ of\ a\ hotel\ depending\ on\ the\ given\ argument.\ \n\n\ @param\ \ rowIndex\ it\ accepts\ an\ integer\ that\ is\ within\ the\ range\ 0\ to\ 3.\ It\ throws\ an\ exception\ if\ input\ is\ \n\ out\ of\ bound.\ \n\ \n\ @param\ \ colIndex\ it\ accepts\ an\ integer\ that\ is\ within\ the\ range\ 0\ to\ 4.\ It\ throws\ an\ exception\ if\ input\ is\ \n\ out\ of\ bound.\ \n\ \n\ @return\ \ \ reviews[colIndex][rowIndex]\ it\ returns\ the\ rating\ of\ the\ at\ the\ index\ row\ by\ column.\n
comment4.params=index
comment4.target=java.lang.String\ getHotel(int)
comment4.text=\n\ This\ method\ accesses\ the\ name\ of\ the\ hotel\ depending\ on\ the\ given\ argument.\ \n\n\ @param\ \ index\ \ accepts\ an\ integer\ value\ that\ is\ within\ the\ range\ 0\ to\ 4.\ It\ throws\ an\ exception\ if\ the\ input\ is\n\ out\ of\ bound.\n\ \n\ @return\ \ \ hotels[index]\ \ it\ returns\ the\ name\ of\ the\ hotel\ that\ is\ passed\ in\ corresponding\ to\ the\ indices\n\ hotel\n
comment5.params=index
comment5.target=double\ getAvgRanks(int)
comment5.text=\n\ This\ is\ the\ method\ that\ accesses\ the\ average\ ranking\ of\ the\ hotel\ passed\ in\ as\ an\ argument.\n\n\ @param\ \ index\ \ it\ accepts\ an\ integer\ value\ within\ the\ range\ of\ col\ 0\ to\ 3.\ It\ throws\ an\ exception\ if\ out\ of\ bound.\n\ \n\ @return\ \ \ \ avgRanks[index]\ it\ returns\ the\ average\ rank\ of\ the\ hotel\ at\ the\ given\ index\ of\ the\ row\ by\ col.\n
comment6.params=name
comment6.target=void\ readData(java.lang.String)
comment6.text=\n\ This\ method\ reads\ data\ from\ the\ text\ file\ and\ also\ updates\ the\ instance\ variables.\ It\ doea\ not\ return\ anything.\n\n\ @param\ \ name\ \ It\ accepts\ the\ file\ name\ that\ is\ connected\ to\ a\ .txt\ file.\ It\ also\ throws\ an\ exception\ if\ the\ file\n\ is\ not\ found\n\ \n\ @return\ \ \ \n
comment7.params=
comment7.target=void\ calculateAvgRankings()
comment7.text=\n\ This\ is\ the\ method\ that\ calculates\ the\ average\ hotel\ reviews.\ It\ neither\ has\ a\ parameter\ nor\ returns\ anything\n\ However\ the\ method\ is\ called\ at\ the\ constructor.\n\ \n\ @param\ \ \n\ \n\ @return\ \ \ \ \n
comment8.params=
comment8.target=java.lang.String\ displayRow()
comment8.text=\n\ This\ is\ the\ method\ that\ displays\ the\ first\ or\ initial\ table\ of\ the\ reviews.\n\n\ @param\ \ \n\ \n\ @return\ \ s\ It\ returns\ the\ result\ or\ the\ text\ that\ is\ to\ be\ displayed.\n
comment9.params=
comment9.target=java.lang.String\ disPlayrank()
comment9.text=\n\ This\ is\ the\ method\ that\ displays\ the\ sorted\ reviews\ by\ their\ rank\n\n\ @param\ \ \n\ @return\ \ s\ it\ returns\ the\ result\ or\ text\ to\ be\ displayed\n
numComments=15
